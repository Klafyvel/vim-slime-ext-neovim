*vim-slime-ext-neovim.txt* A plugin to extend vim-slime for Neovim

Author: Unknown
Version: Unknown
Table of Contents
- Introduction         |vim-slime-ext-neovim-introduction|
- Installation         |vim-slime-ext-neovim-installation|
- Usage                |vim-slime-ext-neovim-usage|
- Configuration        |vim-slime-ext-neovim-configuration|
- Global Variables     |vim-slime-ext-neovim-global-variables|
- Mappings             |vim-slime-ext-neovim-mappings|
- Glossary             |vim-slime-ext-neovim-glossary|

==============================================================================
INTRODUCTION                                                *vim-slime-ext-neovim-introduction*

This is a plugin to send code from a Neovim buffer to a running Neovim 
terminal. This plugin extends |vim-slime-ext-plugins|, which is itself a 
modification of |vim-slime|. This documentation is specifically for 
vim-slime-ext-neovim but also reviews the functionality of vim-slime-ext-plugins 
and vim-slime.

Imagine you are testing quick changes to a Python script. One way to test 
changes is to copy and paste into an open Python REPL in a Neovim terminal. 
With this plugin, you can send the code directly to the REPL using Vim 
operator/motion+text object combinations.

For example, if |SlimeMotionSend| is mapped to 'gz', 'gzip' can send an 
uninterrupted block of text (a paragraph) to the REPL. This works for any 
program in the terminal accepting text input.

==============================================================================
INSTALLATION                                                *vim-slime-ext-neovim-installation*

Note: vim-slime-ext-plugins is a required dependency.

Example installation and configuration using |lazy.nvim|:

    'Klafyvel/vim-slime-ext-neovim',
    dependencies = { "jpalardy/vim-slime-ext-plugins" },
    init = function()
      vim.g.slime_no_mappings = true
      vim.g.slime_target_send = "slime_neovim#send"
      vim.g.slime_target_config = "slime_neovim#config"
      vim.g.slime_input_pid = false
      vim.g.override_status = true
      vim.g.ruled_status = true
    end,
    config = function()
      " Mapping examples here
    end

It's recommended to use `init` for setting global variables before the plugin 
loads; otherwise, they might not take effect.

Vimscript configuration is also possible:

    let g:slime_no_mappings = 1
    let g:slime_target_send = "slime_neovim#send"
    let g:slime_target_config = "slime_neovim#config"
    let g:slime_input_pid = 0
    let g:override_status = 1
    let g:ruled_status = 1
    map gz <Plug>SlimeMotionSend
    map gzz <Plug>SlimeLineSend
    xmap gz <Plug>SlimeRegionSend

Again, it is recommended to use `init` for global variables.

==============================================================================
USAGE                                                       *vim-slime-ext-neovim-usage*

If `vim.g.slime_no_mappings = false`, default mappings will be defined. 
Specific default mappings will be disabled if the user provides their own.

Default mappings:

  - <C-c><C-c> : Send the current paragraph to the terminal
  - {Visual}<C-c><C-c> : Send highlighted text to the terminal
  - <C-c>v : Configure the target terminal

Additional plug mappings:

  - |<Plug>SlimeConfig| : Configure the terminal for the current buffer
  - |<Plug>SlimeRegionSend| : Send a visually selected region to the terminal
  - |<Plug>SlimeLineSend| : Send a line to the terminal
  - |<Plug>SlimeMotionSend| : Send text to the terminal based on motion/text-object

Additional commands:

  - |:SlimeConfig| : Configure the terminal for the current buffer
  - |:SlimeSend| : Send a range of lines to the terminal
  - |:SlimeSend1| : Send text to terminal, with a carriage return
  - |:SlimeSend0| : Send text to terminal, without a carriage return

If you try to send text when no terminal is opened, you'll be prompted to 
open one. If multiple terminals are open, you're prompted to select any.

==============================================================================
CONFIGURATION                                               *vim-slime-ext-neovim-configuration*

Global variables (`vim.g.xxx`) need to be created and set by the user. 
By default, they do not exist.

Global variables are described in the next section.


==============================================================================
GLOBAL VARIABLES                                        *vim-slime-ext-neovim-global-variables*

1. *g:slime_no_mappings*

    When set to 1, default mappings are not created. This allows you to 
    define your own. Default is 0.

        let g:slime_no_mappings = 1

2. *g:slime_target_send*

    Specifies the function used for sending text to the terminal.

        let g:slime_target_send = "slime_neovim#send"

3. *g:slime_target_config*

    Specifies the function used for configuring the target terminal.

        let g:slime_target_config = "slime_neovim#config"

4. *g:slime_input_pid*

    When set to 0, disables the prompt for inputting a PID. Default is 1.

        let g:slime_input_pid = 0

5. *g:override_status*

    When set to 1, overrides the status line to indicate the target 
    terminal. Default is 0.

        let g:override_status = 1

6. *g:ruled_status*

    When set to 1, displays rules in the status line to indicate the target
    terminal. Default is 0.

        let g:ruled_status = 1

==============================================================================
MAPPINGS                                                   *vim-slime-ext-neovim-mappings*

1. *<Plug>SlimeConfig*

    Map this to a key sequence to configure the target terminal for the 
    current buffer.

        nmap <Leader>sc <Plug>SlimeConfig

2. *<Plug>SlimeRegionSend*

    Map this to a key sequence to send a visually selected region to the 
    terminal.

        xmap <Leader>s <Plug>SlimeRegionSend

3. *<Plug>SlimeLineSend*

    Map this to a key sequence to send a line to the terminal.

        nmap <Leader>l <Plug>SlimeLineSend

4. *<Plug>SlimeMotionSend*

    Map this to a key sequence to send text to the terminal based on 
    motion/text-object.

        nmap <Leader>m <Plug>SlimeMotionSend

==============================================================================
GLOSSARY                                                    *vim-slime-ext-neovim-glossary*

1. REPL - Read Eval Print Loop
    An interactive environment that takes user input, evaluates it, and 
    returns the output.

2. PID - Process ID
    The identifier number that is used by the operating system to manage 
    running processes.

3. Text Object
    A contiguous region of text, defined by Vim's motion commands.

4. Motion
    A Vim command that moves the cursor.

